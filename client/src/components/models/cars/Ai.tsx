/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from "three";
import React, { useRef } from "react";
import { useGLTF } from "@react-three/drei";
import { GLTF } from "three-stdlib";

type GLTFResult = GLTF & {
    nodes: {
        Body_1: THREE.Mesh;
        Body_2: THREE.Mesh;
        Spoiler: THREE.Mesh;
        FrontLeftWheel: THREE.Mesh;
        FrontRightWheel: THREE.Mesh;
        RearLeftWheel: THREE.Mesh;
        RearRightWheel: THREE.Mesh;
    };
    materials: {
        AKC_Col_1_Tex: THREE.MeshStandardMaterial;
        AKC_Lights_Tex: THREE.MeshStandardMaterial;
    };
};

export function Model(props: JSX.IntrinsicElements["group"]) {
    const { nodes, materials } = useGLTF("/models/cars/Ai.glb") as GLTFResult;
    return (
        <group {...props} dispose={null}>
            <group
                name="Ai_1"
                position={[-12.33, 0.123, 1.126]}
                userData={{ name: "Ai" }}
            >
                <group name="Body" userData={{ name: "Body" }}>
                    <mesh
                        name="Body_1"
                        castShadow
                        receiveShadow
                        geometry={nodes.Body_1.geometry}
                        material={materials.AKC_Col_1_Tex}
                    />
                    <mesh
                        name="Body_2"
                        castShadow
                        receiveShadow
                        geometry={nodes.Body_2.geometry}
                        material={materials.AKC_Lights_Tex}
                    />
                </group>
                <mesh
                    name="Spoiler"
                    castShadow
                    receiveShadow
                    geometry={nodes.Spoiler.geometry}
                    material={materials.AKC_Col_1_Tex}
                    position={[0, 1.056, -1.547]}
                    userData={{ name: "Spoiler" }}
                />
                <group name="Meshes" userData={{ name: "Meshes" }}>
                    <mesh
                        name="FrontLeftWheel"
                        castShadow
                        receiveShadow
                        geometry={nodes.FrontLeftWheel.geometry}
                        material={materials.AKC_Col_1_Tex}
                        position={[0.601, 0.294, 1.125]}
                        userData={{ name: "FrontLeftWheel" }}
                    />
                    <mesh
                        name="FrontRightWheel"
                        castShadow
                        receiveShadow
                        geometry={nodes.FrontRightWheel.geometry}
                        material={materials.AKC_Col_1_Tex}
                        position={[-0.601, 0.294, 1.125]}
                        userData={{ name: "FrontRightWheel" }}
                    />
                    <mesh
                        name="RearLeftWheel"
                        castShadow
                        receiveShadow
                        geometry={nodes.RearLeftWheel.geometry}
                        material={materials.AKC_Col_1_Tex}
                        position={[0.594, 0.302, -1.248]}
                        userData={{ name: "RearLeftWheel" }}
                    />
                    <mesh
                        name="RearRightWheel"
                        castShadow
                        receiveShadow
                        geometry={nodes.RearRightWheel.geometry}
                        material={materials.AKC_Col_1_Tex}
                        position={[-0.594, 0.302, -1.248]}
                        userData={{ name: "RearRightWheel" }}
                    />
                </group>
            </group>
        </group>
    );
}

useGLTF.preload("/models/cars/Ai.glb");
