/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from "three";
import React, { useRef, useEffect } from "react";
import { useGLTF } from "@react-three/drei";
import { GLTF } from "three-stdlib";
import { usePlayerStatesStore } from "@/lib/store";
import { CarModelProps } from "@/lib/types";

type GLTFResult = GLTF & {
  nodes: {
    Body_1: THREE.Mesh;
    Body_2: THREE.Mesh;
    Spoiler: THREE.Mesh;
    FrontLeftWheel: THREE.Mesh;
    FrontRightWheel: THREE.Mesh;
    RearLeftWheel: THREE.Mesh;
    RearRightWheel: THREE.Mesh;
  };
  materials: {
    AKC_Col_1_Tex: THREE.MeshStandardMaterial;
    AKC_Lights_Tex: THREE.MeshStandardMaterial;
  };
};

export function Model({ playerId, ...props }: CarModelProps) {
  const { nodes, materials } = useGLTF("/models/cars/Ai.glb") as GLTFResult;

  const { registerPlayerWheels } = usePlayerStatesStore();
  const frontLeftWheelRef = useRef<THREE.Mesh>(null);
  const frontRightWheelRef = useRef<THREE.Mesh>(null);
  const rearLeftWheelRef = useRef<THREE.Mesh>(null);
  const rearRightWheelRef = useRef<THREE.Mesh>(null);
  const registrationRef = useRef(false);

  useEffect(() => {
    if (registrationRef.current) return;

    const wheelRefs = {
      FrontLeftWheel: frontLeftWheelRef,
      FrontRightWheel: frontRightWheelRef,
      RearLeftWheel: rearLeftWheelRef,
      RearRightWheel: rearRightWheelRef,
    };

    registerPlayerWheels(playerId, wheelRefs);

    registrationRef.current = true;
  }, []);

  return (
    <group {...props} dispose={null}>
      <group name="Ai" userData={{ name: "Ai" }}>
        <group name="Body" userData={{ name: "Body" }}>
          <mesh
            name="Body_1"
            castShadow
            receiveShadow
            geometry={nodes.Body_1.geometry}
            material={materials.AKC_Col_1_Tex}
          />
          <mesh
            name="Body_2"
            castShadow
            receiveShadow
            geometry={nodes.Body_2.geometry}
            material={materials.AKC_Lights_Tex}
          />
        </group>
        <mesh
          name="Spoiler"
          castShadow
          receiveShadow
          geometry={nodes.Spoiler.geometry}
          material={materials.AKC_Col_1_Tex}
          position={[0, 1.056, -1.547]}
          userData={{ name: "Spoiler" }}
        />
        <group name="Meshes" userData={{ name: "Meshes" }}>
          <mesh
            ref={frontLeftWheelRef}
            name="FrontLeftWheel"
            castShadow
            receiveShadow
            geometry={nodes.FrontLeftWheel.geometry}
            material={materials.AKC_Col_1_Tex}
            position={[0.601, 0.294, 1.125]}
            userData={{ name: "FrontLeftWheel" }}
          />

          <mesh
            ref={frontRightWheelRef}
            name="FrontRightWheel"
            castShadow
            receiveShadow
            geometry={nodes.FrontRightWheel.geometry}
            material={materials.AKC_Col_1_Tex}
            position={[-0.601, 0.294, 1.125]}
            userData={{ name: "FrontRightWheel" }}
          />

          <mesh
            ref={rearLeftWheelRef}
            name="RearLeftWheel"
            castShadow
            receiveShadow
            geometry={nodes.RearLeftWheel.geometry}
            material={materials.AKC_Col_1_Tex}
            position={[0.594, 0.302, -1.248]}
            userData={{ name: "RearLeftWheel" }}
          />

          <mesh
            ref={rearRightWheelRef}
            name="RearRightWheel"
            castShadow
            receiveShadow
            geometry={nodes.RearRightWheel.geometry}
            material={materials.AKC_Col_1_Tex}
            position={[-0.594, 0.302, -1.248]}
            userData={{ name: "RearRightWheel" }}
          />
        </group>
      </group>
    </group>
  );
}

useGLTF.preload("/models/cars/Ai.glb");
