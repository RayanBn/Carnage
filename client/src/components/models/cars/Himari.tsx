/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from "three";
import React, { useEffect, useRef } from "react";
import { useGLTF } from "@react-three/drei";
import { GLTF } from "three-stdlib";
import { usePlayerStatesStore } from "@/lib/store";
import { CarModelProps } from "@/lib/types";

type GLTFResult = GLTF & {
  nodes: {
    Body003_1: THREE.Mesh;
    Body003_2: THREE.Mesh;
    FrontLeftWheel003: THREE.Mesh;
    FrontRightWheel003: THREE.Mesh;
    RearLeftWheel003: THREE.Mesh;
    RearRightWheel003: THREE.Mesh;
  };
  materials: {
    ["AKC_Col_1_Tex.003"]: THREE.MeshStandardMaterial;
    ["AKC_Lights_Tex.003"]: THREE.MeshStandardMaterial;
  };
};

export function Model({ playerId, ...props }: CarModelProps) {
  const { nodes, materials } = useGLTF("/models/cars/Himari.glb") as GLTFResult;

  const { registerPlayerWheels } = usePlayerStatesStore();
  const frontLeftWheelRef = useRef<THREE.Mesh>(null);
  const frontRightWheelRef = useRef<THREE.Mesh>(null);
  const rearLeftWheelRef = useRef<THREE.Mesh>(null);
  const rearRightWheelRef = useRef<THREE.Mesh>(null);
  const registrationRef = useRef(false);

  useEffect(() => {
    if (registrationRef.current) return;

    const wheelRefs = {
      FrontLeftWheel: frontLeftWheelRef,
      FrontRightWheel: frontRightWheelRef,
      RearLeftWheel: rearLeftWheelRef,
      RearRightWheel: rearRightWheelRef,
    };

    registerPlayerWheels(playerId, wheelRefs);

    registrationRef.current = true;
  }, []);

  return (
    <group {...props} dispose={null}>
      <group name="Himari" userData={{ name: "Himari" }}>
        <group name="Body003" userData={{ name: "Body.003" }}>
          <mesh
            name="Body003_1"
            castShadow
            receiveShadow
            geometry={nodes.Body003_1.geometry}
            material={materials["AKC_Col_1_Tex.003"]}
          />
          <mesh
            name="Body003_2"
            castShadow
            receiveShadow
            geometry={nodes.Body003_2.geometry}
            material={materials["AKC_Lights_Tex.003"]}
          />
        </group>
        <group name="Meshes003" userData={{ name: "Meshes.003" }}>
          <mesh
            ref={frontLeftWheelRef}
            name="FrontLeftWheel003"
            castShadow
            receiveShadow
            geometry={nodes.FrontLeftWheel003.geometry}
            material={materials["AKC_Col_1_Tex.003"]}
            position={[0.545, 0.279, 1.019]}
            userData={{ name: "FrontLeftWheel.003" }}
          />
          <mesh
            ref={frontRightWheelRef}
            name="FrontRightWheel003"
            castShadow
            receiveShadow
            geometry={nodes.FrontRightWheel003.geometry}
            material={materials["AKC_Col_1_Tex.003"]}
            position={[-0.545, 0.279, 1.019]}
            userData={{ name: "FrontRightWheel.003" }}
          />
          <mesh
            ref={rearLeftWheelRef}
            name="RearLeftWheel003"
            castShadow
            receiveShadow
            geometry={nodes.RearLeftWheel003.geometry}
            material={materials["AKC_Col_1_Tex.003"]}
            position={[0.545, 0.279, -1.021]}
            userData={{ name: "RearLeftWheel.003" }}
          />
          <mesh
            ref={rearRightWheelRef}
            name="RearRightWheel003"
            castShadow
            receiveShadow
            geometry={nodes.RearRightWheel003.geometry}
            material={materials["AKC_Col_1_Tex.003"]}
            position={[-0.545, 0.279, -1.021]}
            userData={{ name: "RearRightWheel.003" }}
          />
        </group>
      </group>
    </group>
  );
}

useGLTF.preload("/models/cars/Himari.glb");
